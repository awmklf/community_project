<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="community.reply.service.ReplyDAO">

<!-- 덧글 마지막 번호 조회 쿼리 -->
<select id="selectLastReplyId" resultType="java.lang.String">
	SELECT 
		MAX(REPLY_ID)
	FROM REPLY
</select>

<!-- 덧글 목록 조회 쿼리 -->
<select id="selectReplyList" resultType="ReplyVO">
WITH RECURSIVE ReplyHierarchy AS (
	    SELECT 
	        REPLY_ID
	        , PARENT_REPLY_ID
	        , BOARD_ID
	        , REGISTER_ID
	        , REPLY_CN
	        , CREAT_IP
	        , USE_AT
	        , FRST_REGIST_PNTTM
	        , LAST_UPDT_PNTTM
	        , 0 AS DEPTH
	        , REPLY_ID AS ROOT_REPLY
	        , CONCAT('', SUBSTR(REPLY_ID, 5)) AS SORT_PATH
	        
	    FROM REPLY
	    WHERE BOARD_ID = #{boardId} 
	    	AND PARENT_REPLY_ID IS NULL
	    
	    UNION ALL
	    
	    SELECT 
	        A.REPLY_ID
	        , A.PARENT_REPLY_ID
	        , A.BOARD_ID
	        , A.REGISTER_ID
	        , A.REPLY_CN
	        , A.CREAT_IP
	        , A.USE_AT
	        , A.FRST_REGIST_PNTTM
	        , A.LAST_UPDT_PNTTM
	        , RH.DEPTH + 1 AS DEPTH
	        , RH.ROOT_REPLY
	        , CONCAT(RH.SORT_PATH, '-', SUBSTR(A.REPLY_ID, 5)) AS SORT_PATH
	    FROM REPLY A
		    JOIN ReplyHierarchy RH 
		    	ON A.PARENT_REPLY_ID = RH.REPLY_ID
	)
	SELECT
		RH.REPLY_ID
		, RH.PARENT_REPLY_ID
		, RH.BOARD_ID
		, RH.REGISTER_ID
		, RH.REPLY_CN
		, RH.CREAT_IP
		, RH.USE_AT
		, RH.FRST_REGIST_PNTTM
		, RH.LAST_UPDT_PNTTM
		, RH.DEPTH
		, RH.ROOT_REPLY
		, RH.SORT_PATH
		, B.REGISTER_ID AS PARENT_ID
		, C.NICKNAME
		, D.NICKNAME AS PARENT_NICKNAME
		, CASE 
        	WHEN EXISTS (
        		SELECT 1 FROM REPLY WHERE PARENT_REPLY_ID = RH.REPLY_ID
        	) THEN 'Y'
        	ELSE 'N'
   		END AS HAS_CHILD_Rep
	FROM ReplyHierarchy RH
		LEFT JOIN REPLY B
			ON RH.PARENT_REPLY_ID = B.REPLY_ID
	    INNER JOIN USERINFO C 
	    	ON RH.REGISTER_ID = C.USER_ID
	    LEFT JOIN USERINFO D 
	    	ON B.REGISTER_ID = D.USER_ID
	WHERE 
	    CASE 
	        WHEN RH.USE_AT = 'N' AND (
	            NOT EXISTS (
	                SELECT 1 
	                FROM ReplyHierarchy 
	                WHERE SORT_PATH LIKE CONCAT(RH.SORT_PATH, '%') AND USE_AT = 'Y'
	            )
	        ) THEN 'Y'
	        ELSE 'N'
    	END = 'N'
	ORDER BY 
		ROOT_REPLY
		, RH.SORT_PATH
		, FRST_REGIST_PNTTM
	LIMIT #{recordCountPerPage} OFFSET #{firstIndex}
</select>

<!-- 사용중인 덧글 개수 조회 쿼리 -->
<select id="selectReplyListCnt" resultType="java.lang.Integer">
	SELECT 
	 	COUNT(*)
	FROM REPLY 
	WHERE BOARD_ID = #{boardId}
		AND USE_AT = 'Y'
</select>

<!-- 표시되는 덧글 수 조회 쿼리 -->
<select id="selectReplyViewCnt" resultType="java.lang.Integer">
    WITH RECURSIVE ReplyHierarchy AS (
        SELECT 
            REPLY_ID
            , PARENT_REPLY_ID
            , BOARD_ID
            , USE_AT
            , CONCAT('', SUBSTR(REPLY_ID, 5)) AS SORT_PATH
        FROM REPLY
        WHERE BOARD_ID = #{boardId} 
            AND PARENT_REPLY_ID IS NULL
        
        UNION ALL
        
        SELECT 
            A.REPLY_ID
            , A.PARENT_REPLY_ID
            , A.BOARD_ID
            , A.USE_AT
            , CONCAT(RH.SORT_PATH, '-', SUBSTR(A.REPLY_ID, 5)) AS SORT_PATH
        FROM REPLY A
            JOIN ReplyHierarchy RH 
                ON A.PARENT_REPLY_ID = RH.REPLY_ID
    )
    SELECT  COUNT(*)
    FROM ReplyHierarchy RH
    WHERE 
        CASE 
	        WHEN RH.USE_AT = 'N' AND (
	            NOT EXISTS (
	                SELECT 1 
	                FROM ReplyHierarchy 
	                WHERE SORT_PATH LIKE CONCAT(RH.SORT_PATH, '%') AND USE_AT = 'Y'
	            )
	        ) THEN 'Y'
	        ELSE 'N'
    	END = 'N'
</select>

<!-- 덧글 조회 쿼리 -->
<select id="selectReply" resultType="ReplyVO">
	SELECT 
        REPLY_ID
        , PARENT_REPLY_ID
        , BOARD_ID
        , REGISTER_ID
        , REPLY_CN
        , CREAT_IP
        , USE_AT
        , FRST_REGIST_PNTTM
        , LAST_UPDT_PNTTM
    FROM REPLY
    WHERE REPLY_ID = #{replyId}
</select>

<!-- 덧글 작성 쿼리 --> 
<insert id="insertReply">
	INSERT INTO REPLY(
		REPLY_ID
		, PARENT_REPLY_ID
		, BOARD_ID
		, REGISTER_ID
		, REPLY_CN
		, CREAT_IP
		, USE_AT
		, FRST_REGIST_PNTTM
	) VALUES(
		#{replyId}
		, #{parentReplyId}
		, #{boardId}
		, #{registerId}
		, #{replyCn}
		, #{creatIp}
		, 'Y'
		, NOW()
	)
</insert>

<!-- 덧글 수정 쿼리 -->
<update id="updateReply">
	UPDATE REPLY SET 
		REPLY_CN = #{replyCn}
		, LAST_UPDT_PNTTM = NOW()
	WHERE REPLY_ID = #{replyId}
	<if test='mngAt != "Y"'>
		AND REGISTER_ID = #{userId}
	</if>
</update>

<!-- 덧글 삭제 쿼리 -->
<update id="deleteReply">
	UPDATE REPLY SET 
		USE_AT = 'N'
	WHERE REPLY_ID = #{replyId}
	<if test='mngAt != "Y"'>
		AND REGISTER_ID = #{userId}
	</if>
</update>
</mapper>